import torch
import torch.nn as nn

from transformers import CLIPVisionModel, CLIPImageProcessor, CLIPVisionConfig, AutoModel, LayoutLMv3Model, LayoutLMv3ImageProcessor


class CLIPVisionTower(nn.Module):
    def __init__(self, vision_tower, args, delay_load=False):
        super().__init__()

        self.is_loaded = False

        self.vision_tower_name = vision_tower
        self.select_layer = args.mm_vision_select_layer
        self.select_feature = getattr(args, 'mm_vision_select_feature', 'patch')

        if not delay_load:
            self.load_model()
        elif getattr(args, 'unfreeze_mm_vision_tower', False):
            self.load_model()
        else:
            self.cfg_only = CLIPVisionConfig.from_pretrained(self.vision_tower_name)

    def load_model(self, device_map=None):
        if self.is_loaded:
            print('{} is already loaded, `load_model` called again, skipping.'.format(self.vision_tower_name))
            return
        
        # self.image_processor = CLIPImageProcessor.from_pretrained(self.vision_tower_name)
        # self.vision_tower = CLIPVisionModel.from_pretrained(self.vision_tower_name, device_map=device_map)
        # self.vision_tower.requires_grad_(False)

        # humor add layoutlm3 vision encoder
        # layoutlmv3_vision_encoder = AutoModel.from_pretrained(self.vision_tower_name)
        # self.vision_tower = CustomVisualEncoder(layoutlmv3_vision_encoder)
        # self.vision_tower.requires_grad_(False)

        self.image_processor = LayoutLMv3ImageProcessor.from_pretrained(self.vision_tower_name, apply_ocr=True  )
        self.vision_tower = Layoutlmv3VisualEncoder.from_pretrained(self.vision_tower_name)
        self.vision_tower.requires_grad_(False)
        self.is_loaded = True

    def feature_select(self, image_forward_outs):
        image_features = image_forward_outs.hidden_states[self.select_layer]
        if self.select_feature == 'patch':
            image_features = image_features[:, 1:]
        elif self.select_feature == 'cls_patch':
            image_features = image_features
        else:
            raise ValueError(f'Unexpected select feature: {self.select_feature}')
        return image_features

    @torch.no_grad()
    def forward(self, images):
        processed_images = self.image_processor(images)
        outputs = self.vision_tower(processed_images, output_hidden_states=True)
        return outputs.last_hidden_state
        if type(images) is list:
            image_features = []
            for image in images:
                image_forward_out = self.vision_tower(image.to(device=self.device, dtype=self.dtype).unsqueeze(0), output_hidden_states=True)
                image_feature = self.feature_select(image_forward_out).to(image.dtype)
                image_features.append(image_feature)
        else:
            # humor
            # image_forward_outs = self.vision_tower(images.to(device=self.device, dtype=self.dtype), output_hidden_states=True)
            image_forward_outs = self.vision_tower(images.to(device=self.device, dtype=self.dtype), output_hidden_states=True)
            print(f"image_forward_outs:{image_forward_outs}")
            image_features = self.feature_select(image_forward_outs).to(images.dtype)

        return image_features

    @property
    def dummy_feature(self):
        return torch.zeros(1, self.hidden_size, device=self.device, dtype=self.dtype)

    @property
    def dtype(self):
        return self.vision_tower.dtype

    @property
    def device(self):
        return self.vision_tower.device

    @property
    def config(self):
        if self.is_loaded:
            return self.vision_tower.config
        else:
            return self.cfg_only

    @property
    def hidden_size(self):
        print("hidden_size(self):")
        return self.config.hidden_size

    @property
    def num_patches_per_side(self):
        return self.config.image_size // self.config.patch_size

    @property
    def num_patches(self):
        return (self.config.image_size // self.config.patch_size) ** 2


# 用LayoutlmV3的视觉编码器
# class CustomVisualEncoder(nn.Module):
#     def __init__(self, pretrained_model):
#         super(CustomVisualEncoder, self).__init__()
#         self.patch_embed = pretrained_model.patch_embed
#         self.pos_drop = pretrained_model.pos_drop
#         self.layer_norm = pretrained_model.LayerNorm
#         self.dropout = pretrained_model.dropout
#         self.norm = pretrained_model.norm

#     def forward(self, x):
#         x = self.patch_embed(x)
#         x = self.pos_drop(x)
#         x = self.layer_norm(x)
#         x = self.dropout(x)
#         x = self.norm(x)
#         return x

class Layoutlmv3VisualEncoder(LayoutLMv3Model):
    def __init__(self, config):
        super().__init__(config)
        self.config = config

    def forward(self, x, output_hidden_states=True):
        # x = self.patch_embed(x)
        # x = self.pos_drop(x)
        # x = self.layer_norm(x)
        # x = self.dropout(x)
        # x = self.norm(x)
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        x = self.forward_image(x)
        return x
        return super().forward(x, output_hidden_states=output_hidden_states)
